use std::str::FromStr;
use std::collections::HashMap;
use crate::ast::{Program, Workflow, Subworkflow, Integration, Source, Target, Context, Agent, AgentType, Argument, Value, Mapping, PathExpr};
use crate::lexer::Token;

// Use external lexer (our Logos-based lexer)
grammar<'input>(input: &'input str);

extern {
    type Location = usize;
    type Error = String;
    
    enum Token<'input> {
        // Keywords
        "workflow" => Token::Workflow,
        "subworkflow" => Token::Subworkflow,
        "integration" => Token::Integration,
        "source" => Token::Source,
        "target" => Token::Target,
        "context" => Token::Context,
        "agents" => Token::Agents,
        "input" => Token::Input,
        "output" => Token::Output,
        "mapping" => Token::Mapping,
        "use" => Token::Use,
        "config" => Token::Config,
        "preprocessors" => Token::Preprocessors,
        "monitor" => Token::Monitor,
        "deployment" => Token::Deployment,
        
        // Agent types
        "LLM" => Token::LLM,
        "MLModel" => Token::MLModel,
        "BayesianNetwork" => Token::BayesianNetwork,
        "DecisionMatrix" => Token::DecisionMatrix,
        "Router" => Token::Router,
        "Aggregator" => Token::Aggregator,
        "RuleEngine" => Token::RuleEngine,
        "DataNormalizer" => Token::DataNormalizer,
        "MissingValueHandler" => Token::MissingValueHandler,
        "HumanInLoop" => Token::HumanInLoop,
        "Custom" => Token::Custom,
        
        // Context types
        "KnowledgeBase" => Token::KnowledgeBase,
        "Database" => Token::Database,
        
        // Source and target types
        "NATS" => Token::NATS,
        "HTTP" => Token::HTTP,
        "FILE" => Token::FILE,
        
        // Delimiters and operators
        "{" => Token::LeftBrace,
        "}" => Token::RightBrace,
        "[" => Token::LeftBracket,
        "]" => Token::RightBracket,
        "(" => Token::LeftParen,
        ")" => Token::RightParen,
        "," => Token::Comma,
        ":" => Token::Colon,
        "." => Token::Dot,
        "=" => Token::Assign,
        
        // Literals with values
        "identifier" => Token::Identifier(<&'input str>),
        "string" => Token::StringLiteral(<&'input str>),
        "number" => Token::NumberLiteral(<&'input str>),
        "true" => Token::True,
        "false" => Token::False,
        "null" => Token::Null,
    }
}

pub Program: Program = {
    <workflows:Workflow*> <subworkflows:Subworkflow*> => {
        let mut program = Program::new();
        program.workflows = workflows;
        program.subworkflows = subworkflows;
        program
    }
};

Workflow: Workflow = {
    "workflow" <name:Identifier> "{" 
        <source:SourceDef?> 
        <target:TargetDef?> 
        <context:ContextDef?>
        <agents:AgentsDef> 
        <monitor:MonitorDef?>
        <deployment:DeploymentDef?>
    "}" => Workflow {
        name: name,
        source: source,
        target: target,
        context: context,
        preprocessors: None,
        agents: agents,
        monitor: monitor,
        deployment: deployment,
    }
};

SourceDef: Source = {
    "source" ":" <source_value:SourceValue> => source_value
};

TargetDef: Target = {
    "target" ":" <target_value:TargetValue> => target_value
};

AgentsDef: Vec<Agent> = {
    "agents" ":" "[" <agents:AgentList> "]" => agents
};

// List of agents separated by commas
AgentList: Vec<Agent> = {
    <head:Agent> <tail:("," Agent)*> => {
        let mut agents = vec![head];
        agents.extend(tail.into_iter().map(|(_, agent)| agent));
        agents
    },
    => Vec::new()
};

SourceValue: Source = {
    // Específicos para los tipos de fuente soportados
    "NATS" "(" <topic:StringLiteral> ")" => Source::NATS(topic, None),
    "HTTP" "(" <topic:StringLiteral> ")" => Source::HTTP(topic, None),
    "FILE" "(" <topic:StringLiteral> ")" => Source::File(topic, None),
    
    // Para tipos personalizados
    <name:Identifier> "(" <topic:StringLiteral> ")" => 
        match name.as_str() {
            "Kafka" => Source::Kafka(topic, None),
            "MQTT" => Source::MQTT(topic, None),
            _ => Source::Custom(name, vec![Value::String(topic)])
        }
};

TargetValue: Target = {
    // Específicos para los tipos de destino soportados
    "NATS" "(" <topic:StringLiteral> ")" => Target::NATS(topic, None),
    "HTTP" "(" <topic:StringLiteral> ")" => Target::HTTP(topic, None),
    "FILE" "(" <topic:StringLiteral> ")" => Target::File(topic, None),
    
    // Para tipos personalizados
    <name:Identifier> "(" <topic:StringLiteral> ")" => 
        match name.as_str() {
            "Kafka" => Target::Kafka(topic, None),
            "MQTT" => Target::MQTT(topic, None),
            _ => Target::Custom(name, vec![Value::String(topic)])
        }
};

Agent: Agent = {
    <agent_type:AgentType> "(" <args:Arguments> ")" => {
        let mut id = None;
        let mut config = Vec::new();
        
        for arg in args {
            if let Argument::Named(name, Value::String(value)) = &arg {
                if name == "id" {
                    id = Some(value.clone());
                } else {
                    config.push(arg.clone());
                }
            } else {
                config.push(arg.clone());
            }
        }
        
        Agent {
            id,
            agent_type,
            config,
        }
    }
};

// Add support for comma-separated arguments
Arguments: Vec<Argument> = {
    <head:Argument> <tail:("," Argument)*> => {
        let mut args = vec![head];
        args.extend(tail.into_iter().map(|(_, arg)| arg));
        args
    },
    => Vec::new()
};

AgentType: AgentType = {
    "LLM" => AgentType::LLM,
    "MLModel" => AgentType::MLModel,
    "BayesianNetwork" => AgentType::BayesianNetwork,
    <name:Identifier> => AgentType::Custom(name)
};

// Add support for Subworkflows
Subworkflow: Subworkflow = {
    "subworkflow" <name:Identifier> "{" 
        <input_vals:SubworkflowInputDef?>
        <output_vals:SubworkflowOutputDef?>
        <context:ContextDef?>
        <agents:AgentsDef> 
    "}" => Subworkflow {
        name: name,
        input: input_vals,
        output: output_vals,
        context: context,
        agents: agents,
    }
};

// Input definition for subworkflows
SubworkflowInputDef: Vec<String> = {
    "input" ":" "[" <inputs:StringList> "]" => inputs
};

// Output definition for subworkflows
SubworkflowOutputDef: Vec<String> = {
    "output" ":" "[" <outputs:StringList> "]" => outputs
};

// List of strings for input/output definitions
StringList: Vec<String> = {
    <head:StringLiteral> <tail:("," StringLiteral)*> => {
        let mut strings = vec![head];
        strings.extend(tail.into_iter().map(|(_, s)| s));
        strings
    },
    => Vec::new()
};

// Add support for Context
ContextDef: Context = {
    "context" ":" "KnowledgeBase" "(" <name:StringLiteral> ")" => {
        Context::KnowledgeBase(name, None)
    },
    "context" ":" "BayesianNetwork" "(" <name:StringLiteral> ")" => {
        Context::BayesianNetwork(name, None)
    },
    "context" ":" "Database" "(" <db_type:StringLiteral> "," <conn_string:StringLiteral> ")" => {
        Context::Database(db_type, conn_string)
    },
    "context" ":" <name:Identifier> "(" <args:Arguments> ")" => {
        Context::Custom(name, args.into_iter().map(|a| match a {
            Argument::Named(_, v) => v,
            Argument::Positional(v) => v
        }).collect())
    }
};

Argument: Argument = {
    <name:Identifier> ":" <value:StringLiteral> => 
        Argument::Named(name, Value::String(value)),
    <name:Identifier> ":" <value:BooleanLiteral> => 
        Argument::Named(name, Value::Boolean(value)),
    <name:Identifier> ":" <value:NumberLiteral> => 
        Argument::Named(name, Value::Number(value)),
    <name:Identifier> ":" <value:ObjectLiteral> => 
        Argument::Named(name, Value::Object(value)),
};

// Add support for Monitor configuration
MonitorDef: HashMap<String, Value> = {
    "monitor" ":" "{" <config:ConfigEntries> "}" => config
};

// Add support for Deployment configuration
DeploymentDef: HashMap<String, Value> = {
    "deployment" ":" "{" <config:ConfigEntries> "}" => config
};

// Configuration entries as key-value pairs
ConfigEntries: HashMap<String, Value> = {
    <head:ConfigEntry> <tail:("," ConfigEntry)*> => {
        let mut map = HashMap::new();
        map.insert(head.0, head.1);
        for (_, (key, value)) in tail {
            map.insert(key, value);
        }
        map
    },
    => HashMap::new()
};

// Single configuration entry as key-value pair
ConfigEntry: (String, Value) = {
    <key:Identifier> ":" <value:Value> => (key, value)
};

// Support for different value types
Value: Value = {
    <s:StringLiteral> => Value::String(s),
    <n:NumberLiteral> => Value::Number(n),
    <b:BooleanLiteral> => Value::Boolean(b),
    <o:ObjectLiteral> => Value::Object(o),
};

// Object literal as a collection of key-value pairs
ObjectLiteral: HashMap<String, Value> = {
    "{" <entries:ConfigEntries> "}" => entries
};

// Boolean literal
BooleanLiteral: bool = {
    "true" => true,
    "false" => false
};

// For literals, we use the lexer token types directly
NumberLiteral: f64 = {
    <n:"number"> => n.parse::<f64>().unwrap_or(0.0)
};

Identifier: String = {
    <id:"identifier"> => id.to_string()
};

StringLiteral: String = {
    <s:"string"> => s.to_string()
};
