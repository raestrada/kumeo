//! Configuration handling for the {{agent_name}} Agent

use crate::routes::RouteAction;
use serde::{Deserialize, Serialize};
use std::env;
use std::fs;
use std::path::Path;

/// Configuration for the Router Agent
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct {{agent_name}}Config {
    /// Path to the routes configuration file
    pub routes_path: String,
    
    /// Default action to take when no routes match
    pub default_action: RouteAction,
    
    /// Whether to stop after the first matching route
    pub stop_after_first_match: bool,
    
    /// Whether to enable debug logging
    pub debug: bool,
}

/// Load the agent configuration
pub fn load_config() -> {{agent_name}}Config {
    // Try to load from environment variable first
    if let Ok(config_str) = env::var("{{agent_name | upper}}_CONFIG") {
        if let Ok(config) = serde_json::from_str(&config_str) {
            return config;
        }
    }
    
    // Try to load from config file
    let config_path = env::var("{{agent_name | upper}}_CONFIG_FILE")
        .unwrap_or_else(|_| "config/{{agent_name | lower}}.json".to_string());
    
    if Path::new(&config_path).exists() {
        if let Ok(contents) = fs::read_to_string(&config_path) {
            if let Ok(config) = serde_json::from_str(&contents) {
                return config;
            }
        }
    }
    
    // Fall back to defaults
    {{agent_name}}Config {
        routes_path: "config/routes.json".to_string(),
        default_action: RouteAction::Log {
            message: "No matching route found".to_string(),
            level: "warn".to_string(),
        },
        stop_after_first_match: true,
        debug: false,
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::env;
    use tempfile::tempdir;
    use std::fs::File;
    use std::io::Write;

    #[test]
    fn test_load_default_config() {
        env::remove_var("{{agent_name | upper}}_CONFIG");
        env::remove_var("{{agent_name | upper}}_CONFIG_FILE");
        
        let config = load_config();
        assert_eq!(config.routes_path, "config/routes.json");
        assert!(matches!(
            config.default_action,
            RouteAction::Log { message, level } if message == "No matching route found" && level == "warn"
        ));
        assert!(config.stop_after_first_match);
        assert!(!config.debug);
    }
    
    #[test]
    fn test_load_config_from_env() {
        let test_config = r#"{
            "routes_path": "/etc/kumeo/routes.json",
            "default_action": {
                "type": "log",
                "message": "Test message",
                "level": "error"
            },
            "stop_after_first_match": false,
            "debug": true
        }"#;
        
        env::set_var("{{agent_name | upper}}_CONFIG", test_config);
        
        let config = load_config();
        assert_eq!(config.routes_path, "/etc/kumeo/routes.json");
        assert!(matches!(
            config.default_action,
            RouteAction::Log { message, level } if message == "Test message" && level == "error"
        ));
        assert!(!config.stop_after_first_match);
        assert!(config.debug);
        
        env::remove_var("{{agent_name | upper}}_CONFIG");
    }
}
