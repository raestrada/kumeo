//! Configuration handling for the {{agent_name}} Agent

use serde::{Deserialize, Serialize};
use std::env;
use std::fs;
use std::path::Path;

/// Configuration for the Data Processor Agent
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct {{agent_name}}Config {
    /// Path to the schema definition
    pub schema: String,
    
    /// Path to the validation rules
    pub rules: String,
    
    /// Output topic for processed data
    pub output_topic: String,
    
    /// Topic for error messages (optional)
    pub error_topic: Option<String>,
    
    /// Whether to validate the input data
    #[serde(default = "default_validate")]
    pub validate: bool,
    
    /// Whether to normalize the output data
    #[serde(default = "default_normalize")]
    pub normalize: bool,
    
    /// Maximum message size in bytes
    #[serde(default = "default_max_message_size")]
    pub max_message_size: usize,
}

fn default_validate() -> bool {
    true
}

fn default_normalize() -> bool {
    true
}

fn default_max_message_size() -> usize {
    10 * 1024 * 1024 // 10MB
}

/// Load the agent configuration
pub fn load_config() -> {{agent_name}}Config {
    // Try to load from environment variable first
    if let Ok(config_str) = env::var("{{agent_name | upper}}_CONFIG") {
        if let Ok(config) = serde_json::from_str(&config_str) {
            return config;
        }
    }
    
    // Try to load from config file
    let config_path = env::var("{{agent_name | upper}}_CONFIG_FILE")
        .unwrap_or_else(|_| "config/{{agent_name | lower}}.json".to_string());
    
    if Path::new(&config_path).exists() {
        if let Ok(contents) = fs::read_to_string(&config_path) {
            if let Ok(config) = serde_json::from_str(&contents) {
                return config;
            }
        }
    }
    
    // Fall back to defaults
    {{agent_name}}Config {
        schema: "schemas/default.json".to_string(),
        rules: "rules/validation.json".to_string(),
        output_topic: "processed.data".to_string(),
        error_topic: Some("errors.data".to_string()),
        validate: true,
        normalize: true,
        max_message_size: 10 * 1024 * 1024, // 10MB
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use std::env;
    use tempfile::tempdir;
    use std::fs::File;
    use std::io::Write;

    #[test]
    fn test_load_default_config() {
        env::remove_var("{{agent_name | upper}}_CONFIG");
        env::remove_var("{{agent_name | upper}}_CONFIG_FILE");
        
        let config = load_config();
        assert_eq!(config.schema, "schemas/default.json");
        assert_eq!(config.rules, "rules/validation.json");
        assert_eq!(config.output_topic, "processed.data");
        assert_eq!(config.error_topic, Some("errors.data".to_string()));
        assert!(config.validate);
        assert!(config.normalize);
        assert_eq!(config.max_message_size, 10 * 1024 * 1024);
    }
    
    #[test]
    fn test_load_config_from_env() {
        let test_config = r#"{
            "schema": "schemas/patient.json",
            "rules": "config/validation_rules.json",
            "output_topic": "validated.patient.data",
            "error_topic": "validation.errors",
            "validate": true,
            "normalize": true,
            "max_message_size": 5242880
        }"#;
        
        env::set_var("{{agent_name | upper}}_CONFIG", test_config);
        
        let config = load_config();
        assert_eq!(config.schema, "schemas/patient.json");
        assert_eq!(config.rules, "config/validation_rules.json");
        assert_eq!(config.output_topic, "validated.patient.data");
        assert_eq!(config.error_topic, Some("validation.errors".to_string()));
        assert!(config.validate);
        assert!(config.normalize);
        assert_eq!(config.max_message_size, 5_242_880);
        
        env::remove_var("{{agent_name | upper}}_CONFIG");
    }
}
