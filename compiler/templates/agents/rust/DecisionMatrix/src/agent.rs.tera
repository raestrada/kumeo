//! {{agent_name}} Agent implementation for decision making

use kumeo_runtime::prelude::*;
use serde::{Deserialize, Serialize};
use std::collections::HashMap;
use std::sync::Arc;
use tracing::{debug, error, info, warn};

use crate::rules::Rule;

/// Configuration for the {{agent_name}} Agent
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct {{agent_name}}Config {
    /// Path to the rules file
    pub rules_path: String,
    
    /// Default decision if no rules match
    pub default_decision: String,
    
    /// Whether to stop after first match
    pub stop_after_first_match: bool,
}

/// {{agent_name}} Agent implementation
pub struct {{agent_name}}Agent {
    config: {{agent_name}}Config,
    rules: Vec<Rule>,
    runtime: Arc<RuntimeClient>,
}

impl {{agent_name}}Agent {
    /// Create a new instance of the agent
    pub fn new(config: {{agent_name}}Config, rules: Vec<Rule>, runtime: Arc<RuntimeClient>) -> Self {
        Self { config, rules, runtime }
    }
    
    /// Evaluate rules against input data
    pub fn evaluate_rules(&self, data: &serde_json::Value) -> Result<String> {
        for rule in &self.rules {
            if rule.matches(data) {
                debug!(rule_id = %rule.id, "Rule matched");
                return Ok(rule.decision.clone());
                
                if self.config.stop_after_first_match {
                    break;
                }
            }
        }
        
        Ok(self.config.default_decision.clone())
    }
    
    /// Process a message
    pub async fn process(&self, message: &[u8]) -> Result<Vec<u8>> {
        let input: serde_json::Value = serde_json::from_slice(message)
            .map_err(|e| anyhow::anyhow!("Invalid input: {}", e))?;
            
        let decision = self.evaluate_rules(&input)?;
        
        let output = serde_json::json!({
            "decision": decision,
            "input": input
        });
        
        Ok(serde_json::to_vec(&output)?)
    }
}

#[async_trait]
impl Agent for {{agent_name}}Agent {
    fn id(&self) -> &str {
        "{{agent_name | lower}}"
    }
    
    async fn start(&self) -> Result<()> {
        info!("Starting {{agent_name}} agent with {} rules", self.rules.len());
        Ok(())
    }
    
    async fn stop(&self) -> Result<()> {
        info!("Stopping {{agent_name}} agent");
        Ok(())
    }
    
    async fn process_message(&self, msg: Message) -> Result<()> {
        match self.process(&msg.payload).await {
            Ok(response) => {
                if let Some(reply_to) = msg.reply_to {
                    self.runtime.publish(&reply_to, response).await?;
                }
                Ok(())
            }
            Err(e) => {
                error!("Error processing message: {}", e);
                Err(e)
            }
        }
    }
}
