use std::sync::Arc;
use anyhow::{Result, Context};
use tokio::signal;
use tracing::{info, error, Level};
use tracing_subscriber::FmtSubscriber;

mod agents;
mod kumeo_runtime;

use agents::AgentRegistry;
use kumeo_runtime::RuntimeClient;

#[tokio::main]
async fn main() -> Result<()> {
    // Initialize logging
    let subscriber = FmtSubscriber::builder()
        .with_max_level(Level::INFO)
        .finish();
    tracing::subscriber::set_global_default(subscriber)
        .expect("setting default subscriber failed");

    info!("Starting Kumeo Agent: {{project_name}}");
    
    info!("Connecting to Kumeo Runtime");
    
    // Initialize runtime client - it will use the default socket path and environment variables
    let runtime_client = RuntimeClient::new()
        .await
        .context("Failed to connect to runtime")?;
        
    info!("Connected to runtime with agent ID: {}", runtime_client.agent_id());
    
    // Initialize agent registry
    let mut registry = AgentRegistry::new(runtime_client);
    
    // Register all agents
    registry.register_all().await?;
    
    info!("Agent registry initialized, waiting for messages...");
    
    // Handle shutdown signals
    match signal::ctrl_c().await {
        Ok(()) => {
            info!("Shutting down...");
        }
        Err(err) => {
            error!("Unable to listen for shutdown signal: {}", err);
        }
    }
    
    Ok(())
}
