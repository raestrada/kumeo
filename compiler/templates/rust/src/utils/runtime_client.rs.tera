use std::path::Path;
use std::pin::Pin;
use std::task::{Context, Poll};
use std::time::Duration;

use anyhow::{Context as _, Result};
use bytes::Bytes;
use futures::Stream;
use tokio::net::UnixStream;
use tokio::sync::mpsc;
use tokio_stream::wrappers::ReceiverStream;
use tonic::transport::{Endpoint, Uri};
use tower::service_fn;

use kumeo_runtime::runtime_service_client::RuntimeServiceClient;
use kumeo_runtime::{
    PublishRequest, SubscribeRequest, SubscribeResponse, ResourceRequest, ResourceResponse,
};

/// Client for interacting with the Kumeo runtime
pub struct RuntimeClient {
    client: RuntimeServiceClient<tonic::transport::Channel>,
}

impl RuntimeClient {
    /// Create a new client connected to the specified Unix socket
    pub async fn new(socket_path: &Path) -> Result<Self> {
        // Create a custom channel that connects to the Unix socket
        let channel = Endpoint::try_from("http://[::]:50051") // The URI will be ignored
            .context("Failed to create endpoint")?
            .connect_with_connector(service_fn(move |_: Uri| {
                let socket_path = socket_path.to_owned();
                async move {
                    UnixStream::connect(socket_path)
                        .await
                        .map_err(|e| {
                            std::io::Error::new(
                                std::io::ErrorKind::Other,
                                format!("Failed to connect to unix socket: {}", e),
                            )
                        })
                }
            }))
            .await
            .context("Failed to connect to runtime")?;

        Ok(Self {
            client: RuntimeServiceClient::new(channel),
        })
    }

    /// Publish a message to a topic
    pub async fn publish(&mut self, topic: &str, payload: &[u8]) -> Result<()> {
        let request = tonic::Request::new(PublishRequest {
            topic: topic.to_string(),
            payload: payload.to_vec(),
            headers: Default::default(),
        });

        self.client
            .publish(request)
            .await
            .context("Failed to publish message")?;

        Ok(())
    }

    /// Subscribe to a topic
    pub fn subscribe(&mut self, topic: &str) -> impl Stream<Item = Result<Vec<u8>>> + '_ {
        let (tx, rx) = mpsc::channel(32);
        let topic = topic.to_string();

        let mut client = self.client.clone();

        tokio::spawn(async move {
            let request = tonic::Request::new(SubscribeRequest {
                topic,
                queue_group: None,
            });

            let mut stream = match client.subscribe(request).await {
                Ok(response) => response.into_inner(),
                Err(e) => {
                    let _ = tx
                        .send(Err(anyhow::anyhow!("Failed to subscribe: {}", e)))
                        .await;
                    return;
                }
            };

            while let Some(result) = stream.message().await.transpose() {
                match result {
                    Ok(response) => {
                        if tx.send(Ok(response.payload)).await.is_err() {
                            break;
                        }
                    }
                    Err(e) => {
                        let _ = tx
                            .send(Err(anyhow::anyhow!("Stream error: {}", e)))
                            .await;
                        break;
                    }
                }
            }
        });

        ReceiverStream::new(rx).map_err(Into::into)
    }

    /// Get a resource from the runtime
    pub async fn get_resource(&mut self, uri: &str) -> Result<Vec<u8>> {
        let request = tonic::Request::new(ResourceRequest {
            uri: uri.to_string(),
        });

        let response = self
            .client
            .get_resource(request)
            .await
            .context("Failed to get resource")?;

        Ok(response.into_inner().data)
    }
}

#[cfg(test)]
mod tests {
    use super::*;
    use tempfile::tempdir;
    use tokio::fs;

    #[tokio::test]
    async fn test_unix_socket_connection() {
        // This is a simple test to verify the Unix socket connection works
        // In a real test, you would need a mock server
        let temp_dir = tempdir().unwrap();
        let socket_path = temp_dir.path().join("test.sock");
        
        // Skip test if we can't create Unix sockets
        if cfg!(unix) {
            // In a real test, you would start a mock server here
            // For now, we just test that the client can be created
            let client = RuntimeClient::new(&socket_path).await;
            assert!(client.is_err()); // Should fail because there's no server
        }
    }
}
