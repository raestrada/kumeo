# Dependency setup tasks for {{ workflow.name }}
version: '3'

tasks:
  # Install all dependencies
  all:
    desc: Install all dependencies
    cmds:
      - task setup:dependencies:system
      - task setup:tools
      {% for agent in workflow.agents %}
      - task setup:{{ agent.id }}:deps
      {% endfor %}

  # Install system dependencies
  system:
    desc: Install system dependencies
    cmds:
      - |
        # Install required system packages
        if command -v apt-get >/dev/null; then
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev curl git
        elif command -v dnf >/dev/null; then
          sudo dnf install -y gcc gcc-c++ openssl-devel curl git
        elif command -v yum >/dev/null; then
          sudo yum install -y gcc gcc-c++ openssl-devel curl git
        elif command -v pacman >/dev/null; then
          sudo pacman -S --noconfirm base-devel openssl curl git
        elif command -v apk >/dev/null; then
          apk add --update build-base openssl-dev curl git
        fi

  # Install development tools
  tools:
    desc: Install development tools
    cmds:
      - |
        # Install Task
        if ! command -v task >/dev/null; then
          sh -c "$(curl --location https://taskfile.dev/install.sh)" -- -d -b ~/.local/bin
        fi
        
        # Install kubectl if not present
        if ! command -v kubectl >/dev/null; then
          if command -v apt-get >/dev/null; then
            curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
            chmod +x kubectl
            sudo mv kubectl /usr/local/bin/
          elif command -v brew >/dev/null; then
            brew install kubectl
          fi
        fi
        
        # Install Helm if not present
        if ! command -v helm >/dev/null; then
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        fi

  # Install dependencies for specific agent types
  {% for agent in workflow.agents %}
  {{ agent.id }}:deps:
    desc: Install dependencies for {{ agent.id }} agent
    cmds:
      {% if agent.agent_type == "Python" %}
      - |
        if ! command -v python3 >/dev/null; then
          if command -v apt-get >/dev/null; then
            sudo apt-get install -y python3 python3-pip python3-venv
          elif command -v dnf >/dev/null; then
            sudo dnf install -y python3 python3-pip python3-virtualenv
          elif command -v yum >/dev/null; then
            sudo yum install -y python3 python3-pip python3-virtualenv
          elif command -v pacman >/dev/null; then
            sudo pacman -S --noconfirm python python-pip python-virtualenv
          elif command -v apk >/dev/null; then
            apk add --update python3 py3-pip python3-dev
          fi
        fi
        cd {{ agent.id }}-agent && pip install -e .
      {% elif agent.agent_type == "Rust" %}
      - |
        if ! command -v rustc >/dev/null; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
          . $HOME/.cargo/env
        fi
        rustup update
        rustup component add rustfmt clippy
        cd {{ agent.id }}-agent && cargo build
      {% endif %}
  {% endfor %}
