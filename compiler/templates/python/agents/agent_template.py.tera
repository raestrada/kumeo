"""
{{agent_name}} Agent - Generated by Kumeo
"""
import asyncio
import logging
from typing import Any, Dict

from agents.base_agent import BaseAgent

logger = logging.getLogger(__name__)

class {{agent_name}}Agent(BaseAgent):
    """
    {{agent_name}} Agent implementation
    """
    
    def __init__(self, agent_id: str, runtime_client, **kwargs):
        """
        Initialize the {{agent_name}} agent.
        
        Args:
            agent_id: Unique identifier for this agent
            runtime_client: Runtime client for communication
            **kwargs: Additional configuration
        """
        super().__init__(agent_id, runtime_client, **kwargs)
        
        # Initialize agent-specific state here
        self.state = {}
    
    async def on_start(self) -> None:
        """Called when the agent starts"""
        logger.info(f"{{agent_name}} agent {self.agent_id} is starting...")
        
        # Initialize any resources needed by the agent
        # Example: await self._initialize_resources()
        
        logger.info(f"{{agent_name}} agent {self.agent_id} started")
    
    async def on_stop(self) -> None:
        """Called when the agent stops"""
        logger.info(f"{{agent_name}} agent {self.agent_id} is stopping...")
        
        # Clean up any resources used by the agent
        # Example: await self._cleanup_resources()
        
        logger.info(f"{{agent_name}} agent {self.agent_id} stopped")
    
    async def on_message(self, message: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle an incoming message.
        
        Args:
            message: The message to handle
            
        Returns:
            Response to the message
        """
        logger.debug(f"{{agent_name}} agent {self.agent_id} received message: {message}")
        
        # Extract the action from the message
        action = message.get('action', '').lower()
        
        # Route the message to the appropriate handler
        handler = getattr(self, f'handle_{action}', None)
        if not handler or not callable(handler):
            return {
                'success': False,
                'error': f'Unknown action: {action}'
            }
        
        try:
            result = await handler(message.get('params', {}))
            return {
                'success': True,
                'result': result
            }
        except Exception as e:
            logger.error(f"Error handling action '{action}': {e}", exc_info=True)
            return {
                'success': False,
                'error': str(e)
            }
    
    # Add your custom message handlers here
    # Example:
    # async def handle_example(self, params: Dict[str, Any]) -> Any:
    #     """Handle example action"""
    #     return {"message": "Hello from {{agent_name}} agent!"}
