"""
Base agent implementation for Kumeo agents
"""
import abc
import asyncio
import logging
from typing import Any, Dict, Optional

from kumeo_runtime import Agent, RuntimeClient, KumeoRuntimeError

logger = logging.getLogger(__name__)

class BaseAgent(Agent):
    """Base class for all Kumeo agents"""
    
    def __init__(self, agent_id: str, runtime_client: RuntimeClient, **kwargs):
        """
        Initialize the base agent.
        
        Args:
            agent_id: Unique identifier for this agent
            runtime_client: Runtime client for communication
            **kwargs: Additional agent-specific configuration
        """
        self.agent_id = agent_id
        self.runtime = runtime_client
        self.config = kwargs
        self._running = False
        self._tasks = set()
    
    async def start(self) -> None:
        """Start the agent"""
        if self._running:
            logger.warning(f"Agent {self.agent_id} is already running")
            return
            
        self._running = True
        logger.info(f"Starting agent: {self.agent_id}")
        
        try:
            # Initialize the agent
            await self.on_start()
            logger.info(f"Agent {self.agent_id} started successfully")
        except Exception as e:
            self._running = False
            logger.error(f"Failed to start agent {self.agent_id}: {e}", exc_info=True)
            raise
    
    async def stop(self) -> None:
        """Stop the agent"""
        if not self._running:
            return
            
        logger.info(f"Stopping agent: {self.agent_id}")
        self._running = False
        
        # Cancel all running tasks
        for task in self._tasks:
            if not task.done():
                task.cancel()
        
        # Wait for all tasks to complete
        if self._tasks:
            await asyncio.wait(self._tasks, return_when=asyncio.ALL_COMPLETED)
        
        # Call the cleanup hook
        try:
            await self.on_stop()
        except Exception as e:
            logger.error(f"Error during agent {self.agent_id} cleanup: {e}", exc_info=True)
        
        logger.info(f"Agent {self.agent_id} stopped")
    
    async def handle_message(self, message: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle an incoming message.
        
        Args:
            message: The message to handle
            
        Returns:
            Response to the message
        """
        if not self._running:
            return {
                'success': False,
                'error': 'Agent is not running'
            }
            
        try:
            return await self.on_message(message)
        except Exception as e:
            logger.error(f"Error handling message in agent {self.agent_id}: {e}", exc_info=True)
            return {
                'success': False,
                'error': str(e)
            }
    
    def create_task(self, coro) -> asyncio.Task:
        """
        Create a new background task.
        
        The task will be automatically cancelled when the agent stops.
        """
        if not self._running:
            raise RuntimeError("Cannot create task: agent is not running")
            
        task = asyncio.create_task(coro)
        self._tasks.add(task)
        task.add_done_callback(self._tasks.discard)
        return task
    
    # Abstract methods that subclasses must implement
    
    @abc.abstractmethod
    async def on_start(self) -> None:
        """Called when the agent starts"""
        pass
    
    @abc.abstractmethod
    async def on_stop(self) -> None:
        """Called when the agent stops"""
        pass
    
    @abc.abstractmethod
    async def on_message(self, message: Dict[str, Any]) -> Dict[str, Any]:
        """
        Handle an incoming message.
        
        Args:
            message: The message to handle
            
        Returns:
            Response to the message
        """
        pass
