// Health Monitoring System
// This workflow orchestrates various agents to monitor patient vitals,
// analyze medical data, and provide real-time health insights and alerts

workflow HealthMonitoringSystem {
  // Define entry points for data
  source: [
    NATS("patient/vitals"),          // Stream of vital signs from medical devices
    NATS("patient/lab_results"),     // Lab test results
    NATS("patient/medical_history")  // Patient records from database
  ]
  
  // Define output channels
  target: [
    NATS("medical/alerts"),           // Critical alerts for medical staff
    NATS("medical/insights"),         // General insights for medical review
    NATS("patient/recommendations")   // Personalized recommendations for patients
  ]
  
  // Shared context for all agents
  context: [
    KnowledgeBase("medical_guidelines.kb"),
    BayesianNetwork("disease_risk.bn"),
    Database("patient_records.db", query="SELECT * FROM patients WHERE id={{patient_id}}")
  ]
  
  // Data preparation and enrichment
  preprocessors: [
    DataNormalizer("vitals_normalizer.json"),
    MissingValueHandler(strategy="median_imputation")
  ]
  
  // Define agent collaboration workflow
  agents: [
    // Vital signs anomaly detection
    MLModel(
      id: "anomaly_detector",
      model: "isolation_forest.onnx",
      input: source.patient/vitals,
      config: {
        threshold: 0.85,
        features: ["heart_rate", "blood_pressure", "oxygen", "temperature"]
      }
    ),
    
    // Medical condition assessment
    LLM(
      id: "condition_assessor",
      engine: "ollama/mistral",
      input: {
        vitals: preprocessors.output,
        anomalies: anomaly_detector.output,
        history: source.patient/medical_history
      },
      prompt: """
        Based on the following patient data:
        Vitals: {{vitals}}
        Detected anomalies: {{anomalies}}
        Medical history: {{history}}
        
        Provide a medical assessment of the patient's current condition.
        Consider potential risks, urgency level, and recommended actions.
        Use context from the medical guidelines knowledge base.
        """
    ),
    
    // Human specialist integration
    HumanInLoop(
      id: "medical_specialist",
      trigger: "condition_assessor.urgency > 7",
      interface: "web_dashboard",
      timeout: "15m",
      fallback: "escalation_protocol.wf"
    ),
    
    // Treatment recommendation
    DecisionTree(
      id: "treatment_recommender",
      model: "treatment_protocols.dt",
      input: {
        assessment: condition_assessor.output,
        lab_results: source.patient/lab_results,
        specialist_input: medical_specialist.output
      }
    ),
    
    // Alert router based on severity
    Router(
      id: "alert_router",
      rules: {
        "severity == 'critical'": target.medical/alerts,
        "severity == 'moderate'": target.medical/insights,
        "severity == 'low'": target.patient/recommendations
      },
      input: {
        assessment: condition_assessor.output,
        recommendation: treatment_recommender.output,
        severity: "auto" // Auto-determined from input data
      }
    )
  ]
  
  // Monitoring and logging configuration
  monitor: {
    metrics: ["response_time", "accuracy", "alert_frequency"],
    dashboard: "grafana/medical_monitoring",
    alerts: {
      "response_time > 5s": "ops/latency_alert",
      "daily_false_positives > 5": "quality/review_needed"
    }
  }
  
  // Deployment configuration
  deployment: {
    kubernetes: {
      namespace: "medical-monitoring",
      resources: {
        "anomaly_detector": {
          cpu: "2",
          memory: "4Gi",
          gpu: "1"
        },
        "condition_assessor": {
          cpu: "4",
          memory: "8Gi"
        }
      },
      scaling: {
        "min_replicas": 2,
        "max_replicas": 10,
        "target_cpu_utilization": 70
      }
    }
  }
}

// Define a specialized subworkflow that can be reused
subworkflow PatientRiskAssessment {
  input: [
    "vitals_data",
    "medical_history",
    "demographics"
  ]
  
  output: [
    "risk_score",
    "risk_factors",
    "recommended_tests"
  ]
  
  context: [
    RiskModel("comorbidity_calculator.rm")
  ]
  
  agents: [
    // Age-specific risk calculation
    DemographicAnalyzer(
      id: "age_risk",
      model: "age_risk.model",
      input: input.demographics
    ),
    
    // Comorbidity analysis
    MLModel(
      id: "comorbidity_analyzer",
      model: "comorbidity.pkl",
      input: input.medical_history
    ),
    
    // Current vitals risk
    RuleEngine(
      id: "vitals_risk",
      rules: "vitals_risk_rules.json",
      input: input.vitals_data
    ),
    
    // Aggregate risk calculation
    Aggregator(
      id: "risk_calculator",
      method: "weighted_average",
      weights: {
        "age_risk": 0.3,
        "comorbidity_analyzer": 0.4,
        "vitals_risk": 0.3
      },
      output_mapping: {
        "score": output.risk_score,
        "factors": output.risk_factors,
        "recommendations": output.recommended_tests
      }
    )
  ]
}

// Integration of the subworkflow into the main workflow
integration {
  workflow: HealthMonitoringSystem,
  use: PatientRiskAssessment,
  mapping: {
    input: {
      "vitals_data": source.patient/vitals,
      "medical_history": source.patient/medical_history,
      "demographics": context.Database
    },
    output: {
      "risk_score": condition_assessor.context.risk,
      "risk_factors": target.medical/insights,
      "recommended_tests": treatment_recommender.input.recommended_tests
    }
  }
}
